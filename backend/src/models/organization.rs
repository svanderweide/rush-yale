//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "organization")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub name: String,
    pub email: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::event_invitee::Entity")]
    EventInvitee,
    #[sea_orm(has_many = "super::event_organization::Entity")]
    EventOrganization,
    #[sea_orm(has_many = "super::user_status::Entity")]
    UserStatus,
}

impl Related<super::event_invitee::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EventInvitee.def()
    }
}

impl Related<super::event_organization::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EventOrganization.def()
    }
}

impl Related<super::user_status::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStatus.def()
    }
}

// many-to-many relationship for Users and Organizations
impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_status::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_status::Relation::Organization.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
